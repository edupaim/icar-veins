//
// Generated file, do not edit! Created by nedtool 5.3 from veins_inet/modules/application/icarnew/messages/ICRMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __ICRMESSAGE_M_H
#define __ICRMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/WaveShortMessage_m.h"
#include "veins/base/utils/SimpleAddress.h"
#include "veins_inet/modules/application/icarnew/messages/ICRNode.h"
// }}

/**
 * Class generated from <tt>veins_inet/modules/application/icarnew/messages/ICRMessage.msg:32</tt> by nedtool.
 * <pre>
 * packet ICRMessage extends WaveShortMessage
 * {
 *     unsigned long numMsg; // number of message
 *     int msgType; // message type 
 *     simtime_t msgLifeTime; // message life time - 16 bits
 *     simtime_t validityDataTimeStamp; // validity timeout of the menor neighborhood condition of the route nodes
 *     double confidence;
 *     unsigned int hopNumber;
 *     simtime_t msgTimeStamp = 0; // timestamp da mensagem
 * 
 *     ICRNode routeNodes[];
 * }
 * </pre>
 */
class ICRMessage : public ::WaveShortMessage
{
  protected:
    unsigned long numMsg;
    int msgType;
    ::omnetpp::simtime_t msgLifeTime;
    ::omnetpp::simtime_t validityDataTimeStamp;
    double confidence;
    unsigned int hopNumber;
    ::omnetpp::simtime_t msgTimeStamp;
    ICRNode *routeNodes; // array ptr
    unsigned int routeNodes_arraysize;

  private:
    void copy(const ICRMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ICRMessage&);

  public:
    ICRMessage(const char *name=nullptr, short kind=0);
    ICRMessage(const ICRMessage& other);
    virtual ~ICRMessage();
    ICRMessage& operator=(const ICRMessage& other);
    virtual ICRMessage *dup() const override {return new ICRMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned long getNumMsg() const;
    virtual void setNumMsg(unsigned long numMsg);
    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
    virtual ::omnetpp::simtime_t getMsgLifeTime() const;
    virtual void setMsgLifeTime(::omnetpp::simtime_t msgLifeTime);
    virtual ::omnetpp::simtime_t getValidityDataTimeStamp() const;
    virtual void setValidityDataTimeStamp(::omnetpp::simtime_t validityDataTimeStamp);
    virtual double getConfidence() const;
    virtual void setConfidence(double confidence);
    virtual unsigned int getHopNumber() const;
    virtual void setHopNumber(unsigned int hopNumber);
    virtual ::omnetpp::simtime_t getMsgTimeStamp() const;
    virtual void setMsgTimeStamp(::omnetpp::simtime_t msgTimeStamp);
    virtual void setRouteNodesArraySize(unsigned int size);
    virtual unsigned int getRouteNodesArraySize() const;
    virtual ICRNode& getRouteNodes(unsigned int k);
    virtual const ICRNode& getRouteNodes(unsigned int k) const {return const_cast<ICRMessage*>(this)->getRouteNodes(k);}
    virtual void setRouteNodes(unsigned int k, const ICRNode& routeNodes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ICRMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ICRMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ICRMESSAGE_M_H

